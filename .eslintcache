[{"C:\\xampp\\htdocs\\pet\\src\\index.js":"1","C:\\xampp\\htdocs\\pet\\src\\App.js":"2","C:\\xampp\\htdocs\\pet\\src\\reportWebVitals.js":"3","C:\\xampp\\htdocs\\pet\\src\\component\\user\\Login.js":"4","C:\\xampp\\htdocs\\pet\\src\\component\\user\\Register.js":"5","C:\\xampp\\htdocs\\pet\\src\\component\\dashboard\\Dashboard.js":"6","C:\\xampp\\htdocs\\pet\\src\\component\\plugins\\popup.js":"7"},{"size":288,"mtime":1606977531645,"results":"8","hashOfConfig":"9"},{"size":1007,"mtime":1607320824625,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1606974251785,"results":"11","hashOfConfig":"9"},{"size":7630,"mtime":1607396655145,"results":"12","hashOfConfig":"9"},{"size":7778,"mtime":1607396825030,"results":"13","hashOfConfig":"9"},{"size":12473,"mtime":1607397375540,"results":"14","hashOfConfig":"9"},{"size":1780,"mtime":1607265320489,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"bxz1ke",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"C:\\xampp\\htdocs\\pet\\src\\index.js",[],["35","36"],"C:\\xampp\\htdocs\\pet\\src\\App.js",[],"C:\\xampp\\htdocs\\pet\\src\\reportWebVitals.js",[],"C:\\xampp\\htdocs\\pet\\src\\component\\user\\Login.js",["37","38","39","40","41","42","43"],"/*\r\n @ This file will handle the login\r\n @ Author: Adeniyi Anthony\r\n @ email: mlisoftinc@gmail.com\r\n */\r\nimport React from \"react\";\r\nimport Register from \"./Register\";\r\nimport Dashboard from \"../dashboard/Dashboard\";\r\n\r\n\r\nimport {\r\n    BrowserRouter as Router,\r\n    Link,\r\n} from \"react-router-dom\";\r\n\r\nclass Login extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        const port=3000;\r\n        this.state = {\r\n            disabledButton: false,\r\n            popUp: 'hidden',\r\n            meetContState: 'hidden',\r\n            loginFormState: 'visible',\r\n            actionMsg: 'Logging in. Please wait...',\r\n            actionUrl: `/process/login`,\r\n            indexPath: '/dashboard',\r\n            registerPath: '/register',\r\n            phpSelf: '/',\r\n            styles: {\r\n                formControl: \"form-control\",\r\n                formButton: \"form-button\",\r\n                formIbtn: \"ibtn\"\r\n            }\r\n        };\r\n    }\r\n\r\n    setPopUp = (state, wait = null) => {\r\n        if (wait === null) {\r\n            this.setState({popUp: state});\r\n        } else {\r\n            // wait for the stipulated time before taking action\r\n            setTimeout(() => {\r\n                this.setState({popUp: state});\r\n            }, wait)\r\n        }\r\n\r\n    };\r\n    disableButton = (state) => {\r\n        this.setState({disabledButton: state});\r\n    };\r\n\r\n    setMessage = (msg) => {\r\n        this.setState({actionMsg: msg});\r\n    };\r\n\r\n    loginAccount = () => {\r\n        /*\r\n         disable the button first\r\n         */\r\n        this.disableButton(true);\r\n        /*\r\n         * once this is completed, show the pop up indicating that we are logging in\r\n         *\r\n         */\r\n        this.setPopUp('visible');\r\n        /*\r\n         * process the login\r\n         */\r\n        let err = false;\r\n\r\n        const user = document.getElementById('user').value;\r\n        const password = document.getElementById('password').value;\r\n\r\n        const rnd = Math.random();\r\n\r\n        if (password == \"\") {\r\n            this.setMessage(\"Password cannot be empty\");\r\n            err = true;\r\n        }\r\n        if (user == \"\") {\r\n            this.setMessage(\"Username cannot be empty\");\r\n            err = true;\r\n        }\r\n\r\n        if (err == true) {\r\n            this.setPopUp('hidden', 2000);\r\n            this.disableButton(false);\r\n            return false;\r\n        }\r\n\r\n        this.setMessage(this.state.actionMsg)\r\n        const postUrl = `${this.state.actionUrl}?user=${user}&password=${password}&rnd=${rnd}`;\r\n\r\n        fetch(postUrl, {\r\n            method:\"get\",\r\n            mode:\"cors\",\r\n            credentials:\"include\",\r\n\r\n        })\r\n            //.then((response) => response.json())\r\n            .then((response) => {\r\n                return (response.json());\r\n                //return (response.text());\r\n            })\r\n            .then((responseJson) => {\r\n                console.log(responseJson);\r\n                const status = responseJson['status'];\r\n                const msg = responseJson['msg'];\r\n                if (status === true) {\r\n                    this.setMessage(msg);\r\n                    document.location = `${this.state.indexPath}?${status}`;\r\n                } else {\r\n                    // notify user of the login failure\r\n                    //alert(msg);\r\n                    this.setMessage(msg);\r\n                    // hide popup screen after 5 seconds\r\n                    this.setPopUp('hidden', 2000);\r\n                    // re-enable login  button\r\n                    this.disableButton(false);\r\n                }\r\n            });\r\n    };\r\n\r\n    formHtml = () => {\r\n        const html =\r\n            <div className=\"row\">\r\n                <div className=\"form-holder\">\r\n                    <div className=\"form-content\">\r\n                        <div className=\"form-items\">\r\n                            <h3>An amazing pet life </h3>\r\n                            <p>Login to your account</p>\r\n                            <div className=\"page-links\">\r\n                                <Link className=\"active\"  id=\"link-to-login\" to=\"/login\">Login</Link>\r\n                                <Link to=\"/register\">Register</Link>\r\n                                <Link style={{display:\"none\", visibility:\"hidden\"}} id=\"link-to-dashboard\" to=\"/dashboard\">Dashboard</Link>\r\n                            </div>\r\n                            <form id='login-form' onSubmit={(e) => {\r\n                                e.preventDefault()\r\n                            }}>\r\n                                <div className=\"modal-backdrop\" style={{visibility: this.state.popUp}}>\r\n                                    <div className=\"modal-content modal_content\">\r\n                                        <div className=\"modal-body\">\r\n                                            <div className=\"loader06\">\r\n                                            </div>\r\n                                            <div className=\"text-primary\">{this.state.actionMsg}</div>\r\n                                        </div>\r\n                                        <div className=\"modal-footer\">\r\n                                            <button className=\"ibtn\" type=\"button\" onClick={() => {\r\n                                                this.setPopUp('hidden');\r\n                                                this.disableButton(false)\r\n                                            }}>\r\n                                                Close\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <input className={this.state.styles.formControl} type=\"text\" name=\"user\" id=\"user\"\r\n                                       placeholder=\"Username\" required/>\r\n                                <input className={this.state.styles.formControl} type=\"password\" name=\"password\"\r\n                                       id=\"password\" placeholder=\"Enter password\" onKeyUp={(e) => {\r\n                                    if (parseInt(e.keyCode) === 13)\r\n                                        this.loginAccount()\r\n                                }}/>\r\n                                <div className={this.state.styles.formButton}>\r\n                                    <button id=\"submit\" type=\"button\" className={this.state.styles.formIbtn}\r\n                                            disabled={this.state.disabledButton}\r\n                                            onClick={() => this.loginAccount()}>Login\r\n                                    </button>\r\n                                    <button className=\"ibtn\" type=\"submit\" id=\"meet-submit\"\r\n                                            style={{visibility: 'hidden'}}> Submit\r\n                                    </button>\r\n                                    <button id=\"meet-submit\" type=\"submit\" style={{visibility: 'hidden'}}></button>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <form method=\"post\" style={{display:\"none\", visibility:\"hidden\"}} id=\"dashboard-login-form\" action=\"/dashboard/\">\r\n                    <input type=\"hidden\" id=\"dashboard-login-token\" defaultValue={false} />\r\n                    <input type=\"submit\" id=\"dashboard-login-button\"/>\r\n                </form>\r\n            </div>\r\n\r\n        return (html);\r\n    };\r\n\r\n    render() {\r\n        return this.formHtml();\r\n    }\r\n}\r\nexport default Login;","C:\\xampp\\htdocs\\pet\\src\\component\\user\\Register.js",["44","45","46","47"],"/*\r\n @ This file will handle the joning a meeting\r\n @ Author: Adeniyi Anthony\r\n @ email: mlisoftinc@gmail.com\r\n */\r\nimport React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nclass Register extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            disabledButton: false,\r\n            popUp: 'hidden',\r\n            meetContState: 'hidden',\r\n            loginFormState: 'visible',\r\n            actionMsg: 'Creating account. Please wait...',\r\n            actionUrl: '/process/register',\r\n            indexPath: '/login',\r\n            phpSelf: '/register',\r\n            styles: {\r\n                formControl: \"form-control\",\r\n                formButton: \"form-button\",\r\n                formIbtn: \"ibtn\"\r\n            }\r\n        };\r\n    }\r\n\r\n    setPopUp = (state, wait = null) => {\r\n        if (wait === null) {\r\n            this.setState({popUp: state});\r\n        } else {\r\n            // wait for the stipulated time before taking action\r\n            setTimeout(() => {\r\n                this.setState({popUp: state});\r\n            }, wait)\r\n        }\r\n\r\n    };\r\n\r\n    disableButton = (state) => {\r\n        this.setState({disabledButton: state});\r\n    };\r\n\r\n    setMessage = (msg) => {\r\n        this.setState({actionMsg: msg});\r\n    };\r\n\r\n    createAccount = () => {\r\n        /*\r\n         disable the button first\r\n         */\r\n        this.disableButton(true);\r\n        /*\r\n         * once this is completed, show the pop up indicating that we are logging in\r\n         *\r\n         */\r\n        this.setPopUp('visible');\r\n        /*\r\n         * process the login\r\n         */\r\n        let err = false;\r\n\r\n        const user = document.getElementById('user').value;\r\n        const email = document.getElementById('email').value;\r\n        const password = document.getElementById('password').value;\r\n        const passwordConfirm = document.getElementById('confirm-password').value;\r\n\r\n        const rnd = Math.random();\r\n\r\n        if (password == \"\") {\r\n            this.setMessage(\"Password cannot be empty\");\r\n            err = true;\r\n        }\r\n        if (password !== passwordConfirm) {\r\n            this.setMessage(\"Confirm password not matching\");\r\n            err = true;\r\n        }\r\n        if (email == \"\" || email.indexOf('@') === -1 || email.indexOf('.') === -1) {\r\n            this.setMessage(\"Email empty or not valid\");\r\n            err = true;\r\n        }\r\n        if (user == \"\") {\r\n            this.setMessage(\"Username cannot be empty\");\r\n            err = true;\r\n        }\r\n\r\n\r\n        if (err == true) {\r\n            this.setPopUp('hidden', 2000);\r\n            this.disableButton(false);\r\n            return false;\r\n        }\r\n\r\n        this.setMessage(this.state.actionMsg)\r\n        const postUrl = `${this.state.actionUrl}?user=${user}&password=${password}&password-confirm=${passwordConfirm}&email=${email}&rnd=${rnd}`;\r\n\r\n        fetch(postUrl)\r\n            .then((response) => {\r\n               return (response.json());\r\n                //return (response.text());\r\n            })\r\n            .then((responseJson) => {\r\n                console.log(responseJson);\r\n                const status = responseJson['status'];\r\n                const msg = responseJson['msg'];\r\n\r\n                if (status === true) {\r\n                    this.setMessage(msg);\r\n                    /* create the socket incase we don't alreay have it running \r\n\t\t\t\t\t*/\r\n                    //meetSubmit.click();\r\n                    document.location = this.state.indexPath;\r\n\r\n                } else {\r\n                    // notify user of the login failure\r\n                    //alert(msg);\r\n                    this.setMessage(msg);\r\n                    // hide popup screen after 5 seconds\r\n                    this.setPopUp('hidden', 2000);\r\n                    // re-enable login  button\r\n                    this.disableButton(false);\r\n                }\r\n            });\r\n    };\r\n\r\n    formHtml = () => {\r\n        const html = <div className=\"row\">\r\n            <div className=\"form-holder\">\r\n                <div className=\"form-content\" >\r\n                    <div className=\"form-items\" id=\"register-form-cont\">\r\n                        <h3>Create an account</h3>\r\n                        <p>Please fill out form</p>\r\n\r\n                        <div className=\"page-links\">\r\n                            <Link to=\"/login\">Login</Link>\r\n                            <Link className=\"active\"  to=\"/register\">Register</Link>\r\n                        </div>\r\n\r\n                        <form id='login-form' method='post' action={this.state.indexPath} onSubmit={(e)=>{\r\n                            e.preventDefault();\r\n                            return false\r\n                        }}>\r\n                            <div className=\"modal-backdrop\" style={{visibility: this.state.popUp}}>\r\n                                <div className=\"modal-content modal_content\">\r\n                                    <div className=\"modal-body\">\r\n                                        <div className=\"loader06\">\r\n                                        </div>\r\n                                        <div className=\"text-primary\">{this.state.actionMsg}</div>\r\n                                    </div>\r\n                                    <div className=\"modal-footer\">\r\n                                        <button className=\"ibtn\" type=\"button\" onClick={() => {\r\n                                            this.setPopUp('hidden');\r\n                                            this.disableButton(false)\r\n                                        }}>\r\n                                            Close\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <input className={this.state.styles.formControl} type=\"text\" name=\"user\" id=\"user\"\r\n                                   placeholder=\"Choose a username\" required/>\r\n                            <input className={this.state.styles.formControl} type=\"text\" name=\"email\" id=\"email\"\r\n                                   placeholder=\"sample@mail.com\"/>\r\n                            <input className={this.state.styles.formControl} type=\"password\" name=\"password\"\r\n                                   id=\"password\" placeholder=\"Enter password\"/>\r\n                            <input className={this.state.styles.formControl} type=\"password\" name=\"confirm-password\"\r\n                                   id=\"confirm-password\" placeholder=\"Confirm password\" onKeyUp={(e)=>{\r\n                                if(parseInt(e.keyCode)===13)\r\n                                    this.createAccount();\r\n                            }}/>\r\n\r\n                            <div className={this.state.styles.formButton}>\r\n                                <button id=\"submit\" type=\"button\" className={this.state.styles.formIbtn}\r\n                                        disabled={this.state.disabledButton}\r\n                                        onClick={() => this.createAccount()}>Create Account\r\n                                </button>\r\n                                <button className=\"ibtn\" type=\"BUTTON\" id=\"meet-submit\"\r\n                                        style={{visibility: 'hidden'}}> Submit\r\n                                </button>\r\n                                <button id=\"meet-submit\" type=\"submit\" style={{visibility: 'hidden'}}></button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>;\r\n        return (html);\r\n    };\r\n\r\n    render() {\r\n        return this.formHtml();\r\n    }\r\n}\r\nexport default Register;","C:\\xampp\\htdocs\\pet\\src\\component\\dashboard\\Dashboard.js",["48","49","50","51","52","53","54"],"/*\r\n @ This file will handle the dashboard\r\n @ Author: Adeniyi Anthony\r\n @ email: mlisoftinc@gmail.com\r\n */\r\nimport React from \"react\";\r\nimport PopUp from \"./../plugins/popup\";\r\nimport {Link, BrowserRouter as Router} from \"react-router-dom\";\r\n\r\nclass Dashboard extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            disabledButton: false,\r\n            popUp: 'hidden',\r\n            popUpContent: null,\r\n            popUpWindow: null,\r\n\r\n            actionMsg: null,\r\n            confirmDeleteMsg: \"Are you sure?\",\r\n            actionUrlSubList: '/process/sub-list',\r\n            actionUrlSub: '/process/sub',\r\n            actionUrlChannelList: '/process/channel-list',\r\n            actionUrlLogout: '/process/logout',\r\n            actionUrlDeleteSub: '/process/sub-delete',\r\n            actionUrlLoginValidate: '/process/login-validate',\r\n            actionUrlUser: '/process/user',\r\n\r\n            indexPath: '/',\r\n            defaultUserRole: 'admin',\r\n            subList: [<div  style={{marginLeft:\"50%\"}} className='loader09'></div>],\r\n            channelList: [<div style={{marginLeft:\"50%\"}} className='loader09'></div>],\r\n            styles: {\r\n                formControl: \"form-control\",\r\n                formButton: \"form-button\",\r\n                formIbtn: \"ibtn\"\r\n            },\r\n            pageLoader: <div className='loader09'></div>,\r\n        };\r\n\r\n        // check if user is logged in\r\n         this.loginValidate();\r\n    }\r\n\r\n    setPopUp = (state, wait = null) => {\r\n        if (wait === null) {\r\n            this.setState({popUp: state});\r\n        } else {\r\n            // wait for the stipulated time before taking action\r\n            setTimeout(() => {\r\n                this.setState({popUp: state});\r\n            }, wait)\r\n        }\r\n\r\n        if (state == 'hidden') {\r\n            // clear the action msg\r\n            this.setState({actionMsg: null})\r\n        }\r\n\r\n    };\r\n\r\n    disableButton = (state) => {\r\n        this.setState({disabledButton: state});\r\n    };\r\n\r\n    setMessage = (msg, callBack = null) => {\r\n        this.setState({actionMsg: msg}, () => {\r\n            return callBack !== null && typeof callBack === 'function' ? callBack() : null;\r\n        });\r\n    };\r\n\r\n    getSubList = () => {\r\n\r\n        const rnd = Math.random();\r\n\r\n        const postUrl = `${this.state.actionUrlSubList}?rnd=${rnd}`;\r\n\r\n        fetch(postUrl)\r\n            //.then((response) => response.json())\r\n            .then((response) => {\r\n                return (response.json());\r\n                //return (response.text());\r\n            })\r\n            .then((responseJson) => {\r\n                console.log(responseJson);\r\n                const status = responseJson['status'];\r\n                const msg = responseJson['msg'];\r\n                const content = responseJson['content'];\r\n\r\n                // filter to have just the channel user not\r\n\r\n                if (status == true) {\r\n                    let curHtml = content.map((sub) => {\r\n\r\n                        const list = <div id={sub['id']} key={sub['id']} className=\"dashboard-list-cont\">\r\n                            <div><span className=\"title\">{sub['channel']}</span>\r\n                                <i className='dashboard-list-delete icon-030 ' onClick={() => {\r\n                                    this.deleteSub(sub['user_id'], sub['channel_id']);\r\n                                }}>\r\n                                </i>\r\n                            </div>\r\n                            <div>Channel: {sub['channel']}</div>\r\n                        </div>;\r\n                        return (list);\r\n                    });\r\n                    //alert(curHtml);\r\n                    this.setState({subList: curHtml});\r\n                } else {\r\n\r\n                    const list = <div className=\"dashboard-list-cont\">\r\n                        <div>{msg}</div>\r\n                    </div>;\r\n                    this.setState({subList: list});\r\n                }\r\n            });\r\n    }\r\n\r\n    getChannelList = () => {\r\n\r\n        const rnd = Math.random();\r\n\r\n        const postUrl = `${this.state.actionUrlChannelList}?rnd=${rnd}`;\r\n\r\n        fetch(postUrl)\r\n            //.then((response) => response.json())\r\n            .then((response) => {\r\n                return (response.json());\r\n                //return (response.text());\r\n            })\r\n            .then((responseJson) => {\r\n                console.log(responseJson);\r\n                const status = responseJson['status'];\r\n                const msg = responseJson['msg'];\r\n                let content = responseJson['content'];\r\n\r\n                if (status == true) {\r\n                    let curHtml = content.map((sub) => {\r\n\r\n                        const list = <div id={sub['id']} key={sub['id']} className=\"dashboard-list-cont\">\r\n                            <div><span className=\"title\">{sub['channel']}</span>\r\n                                <i className='dashboard-list-delete icon-040' onClick={() => {\r\n                                    this.subscribe(sub['id'], sub['channel']);\r\n                                }}>\r\n                                </i>\r\n                            </div>\r\n                            <div>{sub['des']}</div>\r\n                        </div>;\r\n                        return (list);\r\n                    });\r\n                    //alert(curHtml);\r\n                    this.setState({channelList: curHtml});\r\n                } else {\r\n\r\n                    const list = <div className=\"dashboard-list-cont\">\r\n                        <div>{msg}</div>\r\n                    </div>;\r\n                    this.setState({channelList: list});\r\n                }\r\n            });\r\n    }\r\n\r\n    logoutUser = () => {\r\n\r\n        const rnd = Math.random();\r\n        PopUp.setMessage(this, <div className=\"alert alert-info\">Signing out...</div>);\r\n        const postUrl = `${this.state.actionUrlLogout}?rnd=${rnd}`;\r\n        fetch(postUrl)\r\n            .then((response) => response.json())\r\n            .then((responseJson) => {\r\n                console.log(responseJson);\r\n                const status = responseJson['status'];\r\n                const msg = responseJson['status'];\r\n                // once completed, go to dashboard\r\n                if (status === true) {\r\n                    this.setMessage(msg);\r\n                    /* create the socket incase we don't alreay have it running\r\n                    */\r\n                    this.setPopUp('hidden', 2000);\r\n                    //document.location = this.state.indexPath;\r\n                    this.takeToLogin();\r\n                } else {\r\n                    // notify user of the failure\r\n                    //alert(msg);\r\n                    this.setMessage(msg);\r\n                    // hide popup screen after 5 seconds\r\n                    this.setPopUp('hidden', 2000);\r\n                    // re-enable login  button\r\n                    this.disableButton(false);\r\n                }\r\n\r\n            });\r\n    };\r\n\r\n    loginValidate =  async () => {\r\n\r\n        const rnd = Math.random();\r\n        const postUrl = `${this.state.actionUrlLoginValidate}?rnd=${rnd}`;\r\n        await fetch(postUrl, {\r\n            method:\"get\",\r\n            mode:\"cors\",\r\n            credentials:\"include\",\r\n        })\r\n            .then((response) => response.json())\r\n            .then((responseJson) => {\r\n                console.log(responseJson);\r\n                const status = responseJson['status'];\r\n                const msg = responseJson['status'];\r\n                if (status === false) {\r\n                   this.takeToLogin();\r\n                }\r\n            });\r\n    };\r\n\r\n    takeToLogin=()=>{\r\n        document.getElementById(\"link-to-login\").submit();\r\n        document.location.href=this.state.indexPath;\r\n    }\r\n    deleteSub = (userId, channelId) => {\r\n\r\n        const rnd = Math.random();\r\n        PopUp.setMessage(this, <div className=\"alert alert-info\">Unsubscribing, please wait...</div>);\r\n\r\n        const postUrl = `${this.state.actionUrlDeleteSub}?user-id=${userId}&channel-id=${channelId}&rnd=${rnd}`;\r\n\r\n        fetch(postUrl)\r\n            //.then((response) => response.json())\r\n            .then((response) => {\r\n                return (response.json());\r\n                //return (response.text());\r\n            })\r\n            .then((responseJson) => {\r\n                console.log(responseJson);\r\n                const status = responseJson['status'];\r\n                const msg = responseJson['msg'];\r\n\r\n                if (status === true) {\r\n                    PopUp.setMessage(this, <div className=\"alert alert-success\">{msg}</div>);\r\n                    this.getSubList();\r\n                    this.getChannelList()\r\n\r\n                } else {\r\n                    // notify user of the login failure\r\n                    PopUp.setMessage(this, <div className=\"alert alert-danger\">{msg}</div>);\r\n                }\r\n            });\r\n    }\r\n\r\n    subscribe = (channelId, channel) => {\r\n        const rnd = Math.random();\r\n        PopUp.setMessage(this, <div className=\"alert alert-info\">Subscribing to {channel}, please wait...</div>);\r\n\r\n        const postUrl = `${this.state.actionUrlSub}?channel-id=${channelId}&channel=${channel}&rnd=${rnd}`;\r\n        //alert(postUrl);\r\n        fetch(postUrl)\r\n            //.then((response) => response.json())\r\n            .then((response) => {\r\n                return (response.json());\r\n                //return (response.text());\r\n            })\r\n            .then((responseJson) => {\r\n                console.log(responseJson);\r\n                const status = responseJson['status'];\r\n                const msg = responseJson['msg'];\r\n                if (status === true) {\r\n                    PopUp.setMessage(this, <div className=\"alert alert-success\">{msg}</div>);\r\n                    this.getSubList();\r\n                    this.getChannelList()\r\n\r\n                } else {\r\n                    // notify user\r\n                    PopUp.setMessage(this, <div className=\"alert alert-danger\">{msg}</div>);\r\n                }\r\n            });\r\n    }\r\n\r\n    formHtml = (locationName = \"Dashboard\") => {\r\n\r\n        const defaultHeader = <aside className=\"dashboard-header\">\r\n            <div style=\r\n                     {\r\n                         {\r\n                             color: \"#ffff\", fontSize: \"18pt\", marginRight: \"auto\"\r\n                         }\r\n                     }\r\n            >{locationName}\r\n            </div>\r\n            <div style=\r\n                     {\r\n                         {\r\n                             color: \"#ffff\",\r\n                             marginLeft: \"auto\"\r\n                         }\r\n                     }\r\n                 onClick={() => {\r\n                     this.logoutUser()\r\n                 }}\r\n            >\r\n                <i className=\" dashboard-logout icon-086\"></i>\r\n            </div>\r\n            <form method=\"post\" style={{display:\"none\", visibility:\"hidden\"}} id=\"link-to-login\" action=\"/login\">\r\n                <input type=\"hidden\" id=\"link-login-token\" value={false} />\r\n            </form>\r\n        </aside>;\r\n\r\n        const html = <div className=\"room\">\r\n\r\n            <section id=\"room-header\" className=\"room-header\">\r\n                {this.state.actionMsg}\r\n                {this.state.popUpWindow}\r\n                {defaultHeader}\r\n            </section>\r\n\r\n            <section className=\"room-body-dashboard\" className=\"dashboard-content\">\r\n                <div className=\"dashboard-list-cont-no-effect col-sm-6 \" id=\"room-list\">\r\n                    <div className=\"dashboard-list-cont-no-effect dashboard-list-header\">Your Channels</div>\r\n                    {this.state.subList}\r\n                </div>\r\n                <div className=\"dashboard-list-cont-no-effect col-sm-6 \" id=\"subscription-list\">\r\n                    <div className=\"dashboard-list-cont-no-effect dashboard-list-header\">Available Channels</div>\r\n                    {this.state.channelList}\r\n                </div>\r\n            </section>\r\n            <section className=\"room-footer-dashboard\"></section>\r\n        </div>\r\n        return (html);\r\n    };\r\n    componentWillMount= async ()=>{\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.getSubList();\r\n        this.getChannelList();\r\n    }\r\n\r\n    render() {\r\n        //alert(this.formHtml());\r\n        return this.formHtml();\r\n    }\r\n}\r\n\r\nexport default Dashboard;","C:\\xampp\\htdocs\\pet\\src\\component\\plugins\\popup.js",[],["55","56"],{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":7,"column":8,"nodeType":"63","messageId":"64","endLine":7,"endColumn":16},{"ruleId":"61","severity":1,"message":"65","line":8,"column":8,"nodeType":"63","messageId":"64","endLine":8,"endColumn":17},{"ruleId":"61","severity":1,"message":"66","line":12,"column":22,"nodeType":"63","messageId":"64","endLine":12,"endColumn":28},{"ruleId":"61","severity":1,"message":"67","line":20,"column":15,"nodeType":"63","messageId":"64","endLine":20,"endColumn":19},{"ruleId":"68","severity":1,"message":"69","line":78,"column":22,"nodeType":"70","messageId":"71","endLine":78,"endColumn":24},{"ruleId":"68","severity":1,"message":"69","line":82,"column":18,"nodeType":"70","messageId":"71","endLine":82,"endColumn":20},{"ruleId":"68","severity":1,"message":"69","line":87,"column":17,"nodeType":"70","messageId":"71","endLine":87,"endColumn":19},{"ruleId":"68","severity":1,"message":"69","line":72,"column":22,"nodeType":"70","messageId":"71","endLine":72,"endColumn":24},{"ruleId":"68","severity":1,"message":"69","line":80,"column":19,"nodeType":"70","messageId":"71","endLine":80,"endColumn":21},{"ruleId":"68","severity":1,"message":"69","line":84,"column":18,"nodeType":"70","messageId":"71","endLine":84,"endColumn":20},{"ruleId":"68","severity":1,"message":"69","line":90,"column":17,"nodeType":"70","messageId":"71","endLine":90,"endColumn":19},{"ruleId":"61","severity":1,"message":"72","line":8,"column":9,"nodeType":"63","messageId":"64","endLine":8,"endColumn":13},{"ruleId":"61","severity":1,"message":"66","line":8,"column":32,"nodeType":"63","messageId":"64","endLine":8,"endColumn":38},{"ruleId":"68","severity":1,"message":"69","line":56,"column":19,"nodeType":"70","messageId":"71","endLine":56,"endColumn":21},{"ruleId":"68","severity":1,"message":"69","line":93,"column":28,"nodeType":"70","messageId":"71","endLine":93,"endColumn":30},{"ruleId":"68","severity":1,"message":"69","line":137,"column":28,"nodeType":"70","messageId":"71","endLine":137,"endColumn":30},{"ruleId":"61","severity":1,"message":"73","line":208,"column":23,"nodeType":"63","messageId":"64","endLine":208,"endColumn":26},{"ruleId":"74","severity":1,"message":"75","line":314,"column":54,"nodeType":"76","endLine":314,"endColumn":83},{"ruleId":"57","replacedBy":"77"},{"ruleId":"59","replacedBy":"78"},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"no-unused-vars","'Register' is defined but never used.","Identifier","unusedVar","'Dashboard' is defined but never used.","'Router' is defined but never used.","'port' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Link' is defined but never used.","'msg' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["79"],["80"],"no-global-assign","no-unsafe-negation"]